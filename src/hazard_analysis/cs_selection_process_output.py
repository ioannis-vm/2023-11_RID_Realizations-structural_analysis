"""
Processes the output files generated by CS Selection
"""

from math import ceil
import pandas as pd
from extra.structural_analysis.src.util import read_study_param

# initialize
dataframe_rows = []

# archetype information

num_hz = int(read_study_param("extra/structural_analysis/data/study_vars/m"))
ngm_cs = int(read_study_param("extra/structural_analysis/data/study_vars/ngm_cs"))

# initialize
dfs_arch = []

archetype = 'scbf_9_ii'

t_bar = float(
    read_study_param(f"extra/structural_analysis/data/{archetype}/period_closest")
)
conditioning_period = t_bar

# initialize
dfs_hz = []
for hz in range(num_hz):
    path = (
        f"extra/structural_analysis/results/site_hazard/"
        f"{archetype}/required_records_cs_hz_{hz+1}"
    )
    df = pd.read_csv(path, skiprows=6, sep="	", index_col=0, header=[0])
    df.columns = [x.strip() for x in df.columns]
    df = df.loc[:, ("Record Sequence Number", "Scale Factor")]
    df = df.sort_values(by="Record Sequence Number")
    df.index = range(1, ngm_cs + 1)
    df.index.name = "Record Number"
    df.columns = ["RSN", "SF"]
    dfs_hz.append(df)
df = pd.concat(dfs_hz, axis=1, keys=[f"hz_{i+1}" for i in range(num_hz)])

df.columns.names = ["hazard_level", "quantity"]
df = df.T

# store deaggregation results
df.to_csv(
    "extra/structural_analysis/results/site_hazard/"
    "required_records_and_scaling_factors_cs.csv"
)

# obtain unique RSNs to download from the ground motion database
rsns = df.xs("RSN", level=1).astype(int).unstack().unique()
rsns = pd.Series(rsns).sort_values()
rsns.index = range(len(rsns))
# num_times = (df.xs('RSN', level=2).astype(int)
#              .unstack().unstack().value_counts())

gm_group = pd.Series(index=rsns, dtype="int")
num_groups = ceil(len(rsns) / 100)
for group in range(num_groups):
    istart = 100 * group
    iend = min(100 + 100 * group, len(rsns))
    gm_group[rsns.iloc[istart:iend]] = group
    with open(
        f"extra/structural_analysis/results/site_hazard/rsns_unique_{group+1}.txt",
        "w",
        encoding="utf-8",
    ) as f:
        f.write(", ".join([f"{r}" for r in rsns.iloc[istart:iend]]))
gm_group = gm_group.astype(int)
gm_group.index.name = "RSN"
gm_group.name = "group"
gm_group.to_csv(
    "extra/structural_analysis/results/site_hazard/ground_motion_group.csv"
)
